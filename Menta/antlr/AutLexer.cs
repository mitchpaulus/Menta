//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Aut.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AutLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, AUT=2, NUMBERED=3, COMMA=4, INTEGER=5, LBRACE=6, RBRACE=7, LSQUARE=8, 
		RSQUARE=9, DQUOTESTRING=10, SQUOTESTRING=11, EQUALS=12, SEMICOLON=13, 
		COLON=14, RIGHTANGLE=15, PERIOD=16, LINE_COMMENT=17, BLOCK_DATA=18, WS=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "AUT", "NUMBERED", "COMMA", "INTEGER", "LBRACE", "RBRACE", "LSQUARE", 
		"RSQUARE", "DQUOTESTRING", "SQUOTESTRING", "EQUALS", "SEMICOLON", "COLON", 
		"RIGHTANGLE", "PERIOD", "LINE_COMMENT", "BLOCK_TYPE", "BLOCK_DATA", "WS"
	};


	public AutLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AutLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'N'", "'[Aut]'", null, "','", null, "'{'", "'}'", "'['", "']'", 
		null, null, "'='", "';'", "':'", "'>'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "AUT", "NUMBERED", "COMMA", "INTEGER", "LBRACE", "RBRACE", 
		"LSQUARE", "RSQUARE", "DQUOTESTRING", "SQUOTESTRING", "EQUALS", "SEMICOLON", 
		"COLON", "RIGHTANGLE", "PERIOD", "LINE_COMMENT", "BLOCK_DATA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Aut.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AutLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,1,2,1,2,4,2,52,8,2,11,2,12,2,53,1,3,1,3,1,4,4,4,59,8,4,
		11,4,12,4,60,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,5,9,73,8,9,10,9,12,
		9,76,9,9,1,9,1,9,1,10,1,10,5,10,82,8,10,10,10,12,10,85,9,10,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,
		5,16,103,8,16,10,16,12,16,106,9,16,1,16,3,16,109,8,16,1,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,3,17,311,8,17,1,18,1,18,5,18,315,8,18,10,18,12,18,318,9,18,1,18,3,18,
		321,8,18,1,18,1,18,1,19,4,19,326,8,19,11,19,12,19,327,1,19,1,19,4,74,83,
		104,316,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		25,13,27,14,29,15,31,16,33,17,35,0,37,18,39,19,1,0,2,1,0,48,57,3,0,9,10,
		13,13,32,32,392,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,
		0,5,49,1,0,0,0,7,55,1,0,0,0,9,58,1,0,0,0,11,62,1,0,0,0,13,64,1,0,0,0,15,
		66,1,0,0,0,17,68,1,0,0,0,19,70,1,0,0,0,21,79,1,0,0,0,23,88,1,0,0,0,25,
		90,1,0,0,0,27,92,1,0,0,0,29,94,1,0,0,0,31,96,1,0,0,0,33,98,1,0,0,0,35,
		310,1,0,0,0,37,312,1,0,0,0,39,325,1,0,0,0,41,42,5,78,0,0,42,2,1,0,0,0,
		43,44,5,91,0,0,44,45,5,65,0,0,45,46,5,117,0,0,46,47,5,116,0,0,47,48,5,
		93,0,0,48,4,1,0,0,0,49,51,5,35,0,0,50,52,7,0,0,0,51,50,1,0,0,0,52,53,1,
		0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,6,1,0,0,0,55,56,5,44,0,0,56,8,1,0,
		0,0,57,59,7,0,0,0,58,57,1,0,0,0,59,60,1,0,0,0,60,58,1,0,0,0,60,61,1,0,
		0,0,61,10,1,0,0,0,62,63,5,123,0,0,63,12,1,0,0,0,64,65,5,125,0,0,65,14,
		1,0,0,0,66,67,5,91,0,0,67,16,1,0,0,0,68,69,5,93,0,0,69,18,1,0,0,0,70,74,
		5,34,0,0,71,73,9,0,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,75,1,0,0,0,74,72,
		1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,78,5,34,0,0,78,20,1,0,0,0,79,83,
		5,39,0,0,80,82,9,0,0,0,81,80,1,0,0,0,82,85,1,0,0,0,83,84,1,0,0,0,83,81,
		1,0,0,0,84,86,1,0,0,0,85,83,1,0,0,0,86,87,5,39,0,0,87,22,1,0,0,0,88,89,
		5,61,0,0,89,24,1,0,0,0,90,91,5,59,0,0,91,26,1,0,0,0,92,93,5,58,0,0,93,
		28,1,0,0,0,94,95,5,62,0,0,95,30,1,0,0,0,96,97,5,46,0,0,97,32,1,0,0,0,98,
		99,5,45,0,0,99,100,5,45,0,0,100,104,1,0,0,0,101,103,9,0,0,0,102,101,1,
		0,0,0,103,106,1,0,0,0,104,105,1,0,0,0,104,102,1,0,0,0,105,108,1,0,0,0,
		106,104,1,0,0,0,107,109,5,13,0,0,108,107,1,0,0,0,108,109,1,0,0,0,109,110,
		1,0,0,0,110,111,5,10,0,0,111,112,1,0,0,0,112,113,6,16,0,0,113,34,1,0,0,
		0,114,115,5,65,0,0,115,311,5,73,0,0,116,117,5,65,0,0,117,118,5,76,0,0,
		118,119,5,65,0,0,119,120,5,82,0,0,120,311,5,77,0,0,121,122,5,65,0,0,122,
		123,5,78,0,0,123,311,5,68,0,0,124,125,5,65,0,0,125,311,5,79,0,0,126,127,
		5,67,0,0,127,128,5,79,0,0,128,129,5,77,0,0,129,130,5,69,0,0,130,131,5,
		78,0,0,131,311,5,84,0,0,132,133,5,67,0,0,133,134,5,85,0,0,134,135,5,82,
		0,0,135,136,5,86,0,0,136,311,5,69,0,0,137,138,5,68,0,0,138,139,5,65,0,
		0,139,140,5,84,0,0,140,311,5,69,0,0,141,142,5,68,0,0,142,143,5,69,0,0,
		143,144,5,76,0,0,144,145,5,65,0,0,145,311,5,89,0,0,146,147,5,68,0,0,147,
		148,5,69,0,0,148,149,5,76,0,0,149,311,5,66,0,0,150,151,5,68,0,0,151,152,
		5,69,0,0,152,153,5,76,0,0,153,311,5,73,0,0,154,155,5,68,0,0,155,156,5,
		69,0,0,156,157,5,76,0,0,157,311,5,82,0,0,158,159,5,68,0,0,159,311,5,73,
		0,0,160,161,5,68,0,0,161,311,5,79,0,0,162,163,5,69,0,0,163,164,5,78,0,
		0,164,165,5,84,0,0,165,311,5,72,0,0,166,167,5,69,0,0,167,168,5,82,0,0,
		168,311,5,82,0,0,169,170,5,70,0,0,170,171,5,73,0,0,171,172,5,76,0,0,172,
		311,5,84,0,0,173,174,5,72,0,0,174,175,5,70,0,0,175,176,5,65,0,0,176,311,
		5,73,0,0,177,178,5,72,0,0,178,179,5,70,0,0,179,180,5,65,0,0,180,311,5,
		79,0,0,181,182,5,72,0,0,182,183,5,70,0,0,183,311,5,66,0,0,184,185,5,72,
		0,0,185,186,5,70,0,0,186,187,5,68,0,0,187,311,5,73,0,0,188,189,5,72,0,
		0,189,190,5,70,0,0,190,191,5,68,0,0,191,311,5,79,0,0,192,193,5,72,0,0,
		193,194,5,79,0,0,194,195,5,85,0,0,195,311,5,82,0,0,196,197,5,72,0,0,197,
		198,5,89,0,0,198,199,5,83,0,0,199,311,5,84,0,0,200,201,5,76,0,0,201,202,
		5,73,0,0,202,203,5,77,0,0,203,204,5,73,0,0,204,311,5,84,0,0,205,206,5,
		77,0,0,206,207,5,65,0,0,207,311,5,88,0,0,208,209,5,77,0,0,209,210,5,73,
		0,0,210,311,5,78,0,0,211,212,5,78,0,0,212,213,5,79,0,0,213,311,5,84,0,
		0,214,215,5,79,0,0,215,216,5,112,0,0,216,217,5,33,0,0,217,311,5,61,0,0,
		218,219,5,79,0,0,219,220,5,112,0,0,220,311,5,42,0,0,221,222,5,79,0,0,222,
		223,5,112,0,0,223,311,5,43,0,0,224,225,5,79,0,0,225,226,5,112,0,0,226,
		227,5,58,0,0,227,311,5,63,0,0,228,229,5,79,0,0,229,230,5,112,0,0,230,231,
		5,63,0,0,231,311,5,58,0,0,232,233,5,79,0,0,233,234,5,112,0,0,234,311,5,
		66,0,0,235,236,5,79,0,0,236,237,5,112,0,0,237,238,5,45,0,0,238,311,5,110,
		0,0,239,240,5,79,0,0,240,241,5,112,0,0,241,311,5,82,0,0,242,243,5,79,0,
		0,243,244,5,112,0,0,244,245,5,82,0,0,245,311,5,66,0,0,246,247,5,79,0,0,
		247,248,5,112,0,0,248,249,5,82,0,0,249,311,5,82,0,0,250,251,5,79,0,0,251,
		252,5,80,0,0,252,311,5,84,0,0,253,254,5,79,0,0,254,311,5,82,0,0,255,256,
		5,79,0,0,256,257,5,83,0,0,257,311,5,67,0,0,258,259,5,80,0,0,259,260,5,
		73,0,0,260,261,5,68,0,0,261,311,5,80,0,0,262,263,5,80,0,0,263,264,5,82,
		0,0,264,265,5,67,0,0,265,266,5,78,0,0,266,311,5,84,0,0,267,268,5,80,0,
		0,268,269,5,85,0,0,269,270,5,76,0,0,270,271,5,83,0,0,271,311,5,69,0,0,
		272,273,5,80,0,0,273,274,5,86,0,0,274,311,5,66,0,0,275,276,5,80,0,0,276,
		277,5,86,0,0,277,311,5,73,0,0,278,279,5,80,0,0,279,280,5,86,0,0,280,311,
		5,82,0,0,281,282,5,82,0,0,282,283,5,65,0,0,283,284,5,77,0,0,284,311,5,
		80,0,0,285,286,5,82,0,0,286,311,5,84,0,0,287,288,5,83,0,0,288,311,5,82,
		0,0,289,290,5,84,0,0,290,291,5,82,0,0,291,292,5,73,0,0,292,311,5,71,0,
		0,293,294,5,84,0,0,294,295,5,83,0,0,295,296,5,67,0,0,296,311,5,72,0,0,
		297,298,5,87,0,0,298,299,5,68,0,0,299,300,5,65,0,0,300,311,5,89,0,0,301,
		302,5,88,0,0,302,303,5,80,0,0,303,311,5,66,0,0,304,305,5,88,0,0,305,306,
		5,80,0,0,306,311,5,73,0,0,307,308,5,88,0,0,308,309,5,80,0,0,309,311,5,
		82,0,0,310,114,1,0,0,0,310,116,1,0,0,0,310,121,1,0,0,0,310,124,1,0,0,0,
		310,126,1,0,0,0,310,132,1,0,0,0,310,137,1,0,0,0,310,141,1,0,0,0,310,146,
		1,0,0,0,310,150,1,0,0,0,310,154,1,0,0,0,310,158,1,0,0,0,310,160,1,0,0,
		0,310,162,1,0,0,0,310,166,1,0,0,0,310,169,1,0,0,0,310,173,1,0,0,0,310,
		177,1,0,0,0,310,181,1,0,0,0,310,184,1,0,0,0,310,188,1,0,0,0,310,192,1,
		0,0,0,310,196,1,0,0,0,310,200,1,0,0,0,310,205,1,0,0,0,310,208,1,0,0,0,
		310,211,1,0,0,0,310,214,1,0,0,0,310,218,1,0,0,0,310,221,1,0,0,0,310,224,
		1,0,0,0,310,228,1,0,0,0,310,232,1,0,0,0,310,235,1,0,0,0,310,239,1,0,0,
		0,310,242,1,0,0,0,310,246,1,0,0,0,310,250,1,0,0,0,310,253,1,0,0,0,310,
		255,1,0,0,0,310,258,1,0,0,0,310,262,1,0,0,0,310,267,1,0,0,0,310,272,1,
		0,0,0,310,275,1,0,0,0,310,278,1,0,0,0,310,281,1,0,0,0,310,285,1,0,0,0,
		310,287,1,0,0,0,310,289,1,0,0,0,310,293,1,0,0,0,310,297,1,0,0,0,310,301,
		1,0,0,0,310,304,1,0,0,0,310,307,1,0,0,0,311,36,1,0,0,0,312,316,3,35,17,
		0,313,315,9,0,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,317,1,0,0,0,316,
		314,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,319,321,5,13,0,0,320,319,1,
		0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,5,10,0,0,323,38,1,0,0,0,
		324,326,7,1,0,0,325,324,1,0,0,0,326,327,1,0,0,0,327,325,1,0,0,0,327,328,
		1,0,0,0,328,329,1,0,0,0,329,330,6,19,0,0,330,40,1,0,0,0,11,0,53,60,74,
		83,104,108,310,316,320,327,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
